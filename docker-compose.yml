version: '3.8'

services:

  prometheus:
    extends:
      file: ./monitoring/docker-compose.yml
      service: prometheus

  grafana:
    extends:
      file: ./monitoring/docker-compose.yml
      service: grafana

  loki:
    extends:
      file: ./monitoring/docker-compose.yml
      service: loki

  promtail:
    extends:
      file: ./monitoring/docker-compose.yml
      service: promtail

  cadvisor:
    extends:
      file: ./monitoring/docker-compose.yml
      service: cadvisor

  reverse-proxy:
    image: traefik:v3.0
    command:
      - "--log.level=DEBUG"
      - "--api.dashboard=true"
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--configFile=/etc/traefik/traefik.yml"
    labels:
      - "traefik.enable=true"
      # Dashboard configuration
      - "traefik.http.routers.dashboard.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=myresolver"
      # Global redirect HTTP to HTTPS
      - "traefik.http.middlewares.httpsredirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.httpsredirect.redirectscheme.permanent=true"
      - "traefik.http.routers.redirs.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.redirs.entrypoints=web"
      - "traefik.http.routers.redirs.middlewares=httpsredirect"
    ports:
      - "80:80"
      - "443:443"
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik.yml:/etc/traefik/traefik.yml
      - ./acme.json:/acme.json
    networks:
      - app-network
        
  frontend:
    image: utibeokon/frontend:v2.0
    container_name: frontend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.frontend.priority=1"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
    environment:
      - VITE_API_URL=https://${DOMAIN}/api
    networks:
      - app-network
    depends_on:
      - backend

  backend:
    image: utibeokon/backend:latest
    container_name: backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`${DOMAIN}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.backend.priority=2"
      - "traefik.http.middlewares.backend-strip-prefix.stripprefix.prefixes=/api"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.routers.backend.tls.certresolver=myresolver"  
      - "traefik.http.routers.backend.middlewares=backend-strip-prefix"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=mydb
      - POSTGRES_HOST=database
      - POSTGRES_PORT=5432
      # Both formats of database URL for flexibility
      - DATABASE_URL=postgresql://user:password@database:5432/mydb
      - SQLALCHEMY_DATABASE_URL=postgresql://user:password@database:5432/mydb
    networks:
      - app-network
    depends_on:
      database:
        condition: service_healthy  # wait for database to be really ready

  database:
    image: postgres:14
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydb
    volumes:
      - database_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydb"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    ports:
      - "5432:5432"  # exposed for local development

  adminer:
    image: adminer
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.adminer.rule=Host(`db.${DOMAIN}`) || (Host(`${DOMAIN}`) && PathPrefix(`/db`))"
      - "traefik.http.middlewares.adminer-strip.stripprefix.prefixes=/db"
      - "traefik.http.routers.adminer.middlewares=adminer-strip"
      - "traefik.http.routers.adminer.entrypoints=websecure"
      - "traefik.http.routers.adminer.tls=true"
      - "traefik.http.routers.adminer.tls.certresolver=myresolver"
      - "traefik.http.services.adminer.loadbalancer.server.port=8080"
      - "traefik.http.routers.adminer.priority=10"
    networks:
      - app-network
    depends_on:
      - database
        
networks:
  app-network:
    driver: bridge

volumes:
  database_data:
